package org.firstinspires.ftc.teamcode;

import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.hardware.Blinker;
import com.qualcomm.robotcore.hardware.IMU;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.util.ElapsedTime;
@Autonomous(name="RFrontstage")

public class RFrontstage extends LinearOpMode{
    private DcMotor BLMotor;
    private DcMotor BRMotor;
    private Blinker control_Hub;
    private Servo epicServo;
    private DcMotor FLMotor;
    private DcMotor FRMotor;
    private IMU imu;
//    @Override
    public void driver(int FR, int FL, int BR, int BL, double pow, String telem){
        int FRtargetpos;
        int FLtargetpos;
        int BRtargetpos;
        int BLtargetpos;
        
        telemetry.addData("Variables "+telem,"Declared");
        telemetry.update();
        
        FRtargetpos=FRMotor.getCurrentPosition()-(FR);
        FLtargetpos=FLMotor.getCurrentPosition()-(FL);
        BRtargetpos=BRMotor.getCurrentPosition()-(BR);
        BLtargetpos=BLMotor.getCurrentPosition()+(BL);
        
        telemetry.addData("MotorData "+telem,"Snatched");
        telemetry.update();
        
        FRMotor.setTargetPosition(FRtargetpos);
        FLMotor.setTargetPosition(FLtargetpos);
        BRMotor.setTargetPosition(BRtargetpos);
        BLMotor.setTargetPosition(BLtargetpos);
        
        telemetry.addData("TargetPos "+telem,"Declared");
        telemetry.addData("TargetPosFR ",FRtargetpos);
        telemetry.addData("TargetPosFL ",FLtargetpos);
        telemetry.addData("TargetPosBR ",BRtargetpos);
        telemetry.addData("TargetPosBL ",BLtargetpos);
        telemetry.update();
        
        FRMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        FLMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BRMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        BLMotor.setMode(DcMotor.RunMode.RUN_TO_POSITION);
        
        telemetry.addData("Running "+telem,"Happening");
        telemetry.update();
        
        FRMotor.setPower(pow);
        FLMotor.setPower(pow);
        BRMotor.setPower(pow);
        BLMotor.setPower(pow);
        
        telemetry.addData("Power "+telem,"Set");
        telemetry.update();
        
        telemetry.addData("While "+telem,"Started");
        telemetry.update();
        
        while (opModeIsActive()&&
                (
                FRMotor.isBusy()||FLMotor.isBusy()||BRMotor.isBusy()||BLMotor.isBusy()
                )
              )
        {
        telemetry.addData("CurrentPosFR",FRMotor.getCurrentPosition());
        telemetry.addData("CurrentPosFL",FLMotor.getCurrentPosition());
        telemetry.addData("CurrentPosBR",BRMotor.getCurrentPosition());
        telemetry.addData("CurrentPosBL",BLMotor.getCurrentPosition());
        
        telemetry.addData("TargetPosFR ",FRtargetpos);
        telemetry.addData("TargetPosFL ",FLtargetpos);
        telemetry.addData("TargetPosBR ",BRtargetpos);
        telemetry.addData("TargetPosBL ",BLtargetpos);
        telemetry.update();
        }
        
        telemetry.addData("While "+telem,"Done");
        telemetry.update();
        
        FRMotor.setPower(0);
        FLMotor.setPower(0);
        BRMotor.setPower(0);
        BLMotor.setPower(0);
        
        telemetry.addData("Power","Zero");
        telemetry.update();
    }
//    
    public void servy(double pos, int sleeper){
        epicServo.setPosition(pos);
        
        sleep(sleeper);
    }
//*/    
    public void runOpMode()
    {
        telemetry.addData("Motors","Grabbing");
        telemetry.update();
        FRMotor = hardwareMap.get(DcMotor.class,"FRMotor");
        FLMotor = hardwareMap.get(DcMotor.class,"FLMotor");
        BRMotor = hardwareMap.get(DcMotor.class,"BRMotor");
        BLMotor = hardwareMap.get(DcMotor.class,"BLMotor");
        telemetry.addData("Motors","Got");
        telemetry.update();
        epicServo = hardwareMap.get(Servo.class, "EpicServo");
        
        waitForStart();
        if (opModeIsActive())
        {
            /* These values determine how far things go
            Forward: Approx 1ft =500
            Sideways: Approx 10.5-11=500
            Rotation: Almost exactly 90 degrees=925
            */
            telemetry.addData("FirstMove","Going");
            telemetry.update();
            
            driver(150,-150,-150,150,0.25,"one");
            
            driver(1800,1800,1800,1800,0.25,"two");
            
            servy(1,1000);
            servy(0,500);
            
            driver(-100,-100,-100,-100,0.25,"three");
            
            telemetry.addData("Moves","Done");
            telemetry.update();
            // RESET
        }
    }    
}

