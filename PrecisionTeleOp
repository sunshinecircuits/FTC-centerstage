package org.firstinspires.ftc.teamcode.teleop;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.ServoController;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;


@TeleOp
public class PrecisionTeleOp extends LinearOpMode
{
    // Hardware declarations
    public DcMotor FRwheel;
    public DcMotor FLwheel;
    public DcMotor BRwheel;
    public DcMotor BLwheel;
    public DcMotor InMotor;
    public CRServo epicservo;
    public CRServo DRONE;
    public CRServo PIXback;
    public CRServo PIXleft;
    public CRServo PIXright;
    public double handicap=1.0;

    @Override
    public void runOpMode()
    {
        FRwheel = hardwareMap.get(DcMotor.class,"FRMotor");
        FLwheel = hardwareMap.get(DcMotor.class,"FLMotor");
        BRwheel = hardwareMap.get(DcMotor.class,"BRMotor");
        BLwheel = hardwareMap.get(DcMotor.class,"BLMotor");
        InMotor = hardwareMap.get(DcMotor.class,"Intake");
        DRONE = hardwareMap.get(CRServo.class, "Airplane");
        PIXback = hardwareMap.get(CRServo.class, "PixelBack");
        PIXleft = hardwareMap.get(CRServo.class, "PixelLeft");
        PIXright = hardwareMap.get(CRServo.class, "PixelRight");
        telemetry.addData("Status","Intialized");
        telemetry.addData("Handicap",handicap);
        telemetry.update();
        ServoController controller = epicservo.getController();
        controller.pwmEnable();


        waitForStart();
        while(opModeIsActive())
        {
            telemetry.addData("Status","Running");
            telemetry.update();
            //Motors
            double FRtargetpow=0;
            double FLtargetpow=0;
            double BRtargetpow=0;
            double BLtargetpow=0;
            double INtargetpow=0;
            double PIXtargetpos=0;
            double DRONEtargetpow=0;

            /*
            FRtargetpow=gamepad1.right_stick_y;
            FRwheel.setPower(handicap*FRtargetpow);
            telemetry.addData("Front Right TP", FRtargetpow);
            telemetry.addData("Front Right CP", FRwheel.getPower());
            FLtargetpow=-gamepad1.left_stick_y;
            FLwheel.setPower(handicap*FLtargetpow);
            telemetry.addData("Front Left TP", FLtargetpow);
            telemetry.addData("Front Left CP", FLwheel.getPower());
            BRtargetpow=gamepad1.right_stick_y;
            BRwheel.setPower(handicap*BRtargetpow);
            telemetry.addData("Back Right TP", BRtargetpow);
            telemetry.addData("Back Right CP", BRwheel.getPower());
            BLtargetpow=-gamepad1.left_stick_y;
            BLwheel.setPower(handicap*BLtargetpow);
            telemetry.addData("Back Left TP", BLtargetpow);
            telemetry.addData("Back Left CP", BLwheel.getPower());
            */
            //movement for forward and back
            FRtargetpow=gamepad1.left_stick_y;
            FRwheel.setPower(handicap*FRtargetpow);
            //telemetry.addData("Front Right TP", FRtargetpow);
            //telemetry.addData("Front Right CP", FRwheel.getPower());
            FLtargetpow=-gamepad1.left_stick_y;
            FLwheel.setPower(handicap*FLtargetpow);
            //telemetry.addData("Front Left TP", FLtargetpow);
            //telemetry.addData("Front Left CP", FLwheel.getPower());
            BRtargetpow=gamepad1.left_stick_y;
            BRwheel.setPower(handicap*BRtargetpow);
            //telemetry.addData("Back Right TP", BRtargetpow);
            //telemetry.addData("Back Right CP", BRwheel.getPower());
            BLtargetpow=-gamepad1.left_stick_y;
            BLwheel.setPower(handicap*BLtargetpow);
            //telemetry.addData("Back Left TP", BLtargetpow);
            //telemetry.addData("Back Left CP", BLwheel.getPower());

            //movement for left and right
            FRtargetpow=gamepad1.left_stick_x;
            FRwheel.setPower(handicap*FRtargetpow);
            telemetry.addData("Front Right TP", FRtargetpow);
            telemetry.addData("Front Right CP", FRwheel.getPower());
            FLtargetpow=gamepad1.left_stick_x;
            FLwheel.setPower(handicap*FLtargetpow);
            telemetry.addData("Front Left TP", FLtargetpow);
            telemetry.addData("Front Left CP", FLwheel.getPower());
            BRtargetpow=-gamepad1.left_stick_x;
            BRwheel.setPower(handicap*BRtargetpow);
            telemetry.addData("Back Right TP", BRtargetpow);
            telemetry.addData("Back Right CP", BRwheel.getPower());
            BLtargetpow=-gamepad1.left_stick_x;
            BLwheel.setPower(handicap*BLtargetpow);
            telemetry.addData("Back Left TP", BLtargetpow);
            telemetry.addData("Back Left CP", BLwheel.getPower());


            //movement - rotation!!
            FRtargetpow=gamepad1.right_stick_x;
            FRwheel.setPower(handicap*FRtargetpow);
            telemetry.addData("Front Right TP", FRtargetpow);
            telemetry.addData("Front Right CP", FRwheel.getPower());
            FLtargetpow=gamepad1.right_stick_x;
            FLwheel.setPower(handicap*FLtargetpow);
            telemetry.addData("Front Left TP", FLtargetpow);
            telemetry.addData("Front Left CP", FLwheel.getPower());
            BRtargetpow=gamepad1.right_stick_x;
            BRwheel.setPower(handicap*BRtargetpow);
            telemetry.addData("Back Right TP", BRtargetpow);
            telemetry.addData("Back Right CP", BRwheel.getPower());
            BLtargetpow=gamepad1.right_stick_x;
            BLwheel.setPower(handicap*BLtargetpow);
            telemetry.addData("Back Left TP", BLtargetpow);
            telemetry.addData("Back Left CP", BLwheel.getPower());

            //servo testing

            if (gamepad2.a)
            {
                INtargetpow=1;

            }
            else if (gamepad2.x)
            {
                INtargetpow=-1;
            }
            else
            {
                INtargetpow=0;
            }
            InMotor.setPower(INtargetpow);

            telemetry.addData("A stat", gamepad1.a);
            telemetry.addData("X stat", gamepad1.x);
            telemetry.addData("Intake power", InMotor.getPower());

            //*/
            if (gamepad1.right_trigger>=0.5){
                if (handicap<1){
                    handicap=handicap+0.1;
                }
                while (gamepad1.right_trigger>=0.5){

                }
            }else if (gamepad1.left_trigger>=0.5){
                if (handicap>0.1){
                    handicap=handicap-0.1;
                }
                while (gamepad1.left_trigger>=0.5){

                }
            }
            telemetry.addData("Handicap",handicap);

            //Pixel servo 1 usage.
            //(the back arm)
            if (gamepad2.b)
            {
                PIXbacktargetpos=-1;
            }
            else if (gamepad2.y)
            {
                PIXbacktargetpos=1;
            } else{
                PIXbacktargetpos=0;
            }
            PIXback.setPower(PIXbacktargetpos);
            //epicservo.setPosition(EStargetpos); - may use later
            telemetry.addData("PIXbackTP", PIXbacktargetpos);


            //(this is our airplane script)
            if ((gamepad2.right_trigger>=0.5))
            {
                DRONEtargetpow=-1.;
            } else if (gamepad2.left_trigger>=0.5) {
                DRONEtargetpow=1;
            }
            /* else{
                DRONEtargetpow=0;
            }*/
            DRONE.setPower(DRONEtargetpow);
            telemetry.addData("DRONETP", DRONEtargetpow);


        }
    }
}
