package org.firstinspires.ftc.teamcode.teleop;

import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.hardware.CRServo;
import com.qualcomm.robotcore.hardware.ServoController;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;


@TeleOp
public class PrecisionTeleOp extends LinearOpMode
{
    // Hardware declarations
    public DcMotor FRwheel;
    public DcMotor FLwheel;
    public DcMotor BRwheel;
    public DcMotor BLwheel;
    public DcMotor InMotor;
    public CRServo epicservo;
    public CRServo SNTH;
    public CRServo PIXplane;
    public double handicap=1.0;

    @Override
    public void runOpMode()
    {
        FRwheel = hardwareMap.get(DcMotor.class,"FRMotor");
        FLwheel = hardwareMap.get(DcMotor.class,"FLMotor");
        BRwheel = hardwareMap.get(DcMotor.class,"BRMotor");
        BLwheel = hardwareMap.get(DcMotor.class,"BLMotor");
        InMotor = hardwareMap.get(DcMotor.class,"Intake");
        epicservo = hardwareMap.get(CRServo.class, "EpicServo");
        SNTH = hardwareMap.get(CRServo.class, "Suffer not the heretic");
        PIXplane = hardwareMap.get(CRServo.class, "Aero");
        //epicservo.setDirection(Servo.Direction.FORWARD);
        telemetry.addData("Status","Intialized");
        telemetry.addData("Handicap",handicap);
        telemetry.update();
        ServoController controller = epicservo.getController();
        controller.pwmEnable();


        waitForStart();
        while(opModeIsActive())
        {
            telemetry.addData("Status","Running");
            telemetry.addData("Heresy Levels",0);
            telemetry.update();
            //Motors
            double FRtargetpow=0;
            double FLtargetpow=0;
            double BRtargetpow=0;
            double BLtargetpow=0;
            double EStargetpos=0;
            double INtargetpow=0;
            double PIXtargetpos=0;
            double SNTHtargetpow=0;

            /*
            FRtargetpow=gamepad1.right_stick_y;
            FRwheel.setPower(handicap*FRtargetpow);
            telemetry.addData("Front Right TP", FRtargetpow);
            telemetry.addData("Front Right CP", FRwheel.getPower());
            FLtargetpow=-gamepad1.left_stick_y;
            FLwheel.setPower(handicap*FLtargetpow);
            telemetry.addData("Front Left TP", FLtargetpow);
            telemetry.addData("Front Left CP", FLwheel.getPower());
            BRtargetpow=gamepad1.right_stick_y;
            BRwheel.setPower(handicap*BRtargetpow);
            telemetry.addData("Back Right TP", BRtargetpow);
            telemetry.addData("Back Right CP", BRwheel.getPower());
            BLtargetpow=-gamepad1.left_stick_y;
            BLwheel.setPower(handicap*BLtargetpow);
            telemetry.addData("Back Left TP", BLtargetpow);
            telemetry.addData("Back Left CP", BLwheel.getPower());
            */
            //movement for forward and back
            FRtargetpow=gamepad1.left_stick_y;
            FRwheel.setPower(handicap*FRtargetpow);
            //telemetry.addData("Front Right TP", FRtargetpow);
            //telemetry.addData("Front Right CP", FRwheel.getPower());
            FLtargetpow=-gamepad1.left_stick_y;
            FLwheel.setPower(handicap*FLtargetpow);
            //telemetry.addData("Front Left TP", FLtargetpow);
            //telemetry.addData("Front Left CP", FLwheel.getPower());
            BRtargetpow=gamepad1.left_stick_y;
            BRwheel.setPower(handicap*BRtargetpow);
            //telemetry.addData("Back Right TP", BRtargetpow);
            //telemetry.addData("Back Right CP", BRwheel.getPower());
            BLtargetpow=-gamepad1.left_stick_y;
            BLwheel.setPower(handicap*BLtargetpow);
            //telemetry.addData("Back Left TP", BLtargetpow);
            //telemetry.addData("Back Left CP", BLwheel.getPower());

            //movement for left and right
            FRtargetpow=gamepad1.left_stick_x;
            FRwheel.setPower(handicap*FRtargetpow);
            telemetry.addData("Front Right TP", FRtargetpow);
            telemetry.addData("Front Right CP", FRwheel.getPower());
            FLtargetpow=gamepad1.left_stick_x;
            FLwheel.setPower(handicap*FLtargetpow);
            telemetry.addData("Front Left TP", FLtargetpow);
            telemetry.addData("Front Left CP", FLwheel.getPower());
            BRtargetpow=-gamepad1.left_stick_x;
            BRwheel.setPower(handicap*BRtargetpow);
            telemetry.addData("Back Right TP", BRtargetpow);
            telemetry.addData("Back Right CP", BRwheel.getPower());
            BLtargetpow=-gamepad1.left_stick_x;
            BLwheel.setPower(handicap*BLtargetpow);
            telemetry.addData("Back Left TP", BLtargetpow);
            telemetry.addData("Back Left CP", BLwheel.getPower());


            //movement - rotation!!
            FRtargetpow=gamepad1.right_stick_x;
            FRwheel.setPower(handicap*FRtargetpow);
            telemetry.addData("Front Right TP", FRtargetpow);
            telemetry.addData("Front Right CP", FRwheel.getPower());
            FLtargetpow=gamepad1.right_stick_x;
            FLwheel.setPower(handicap*FLtargetpow);
            telemetry.addData("Front Left TP", FLtargetpow);
            telemetry.addData("Front Left CP", FLwheel.getPower());
            BRtargetpow=gamepad1.right_stick_x;
            BRwheel.setPower(handicap*BRtargetpow);
            telemetry.addData("Back Right TP", BRtargetpow);
            telemetry.addData("Back Right CP", BRwheel.getPower());
            BLtargetpow=gamepad1.right_stick_x;
            BLwheel.setPower(handicap*BLtargetpow);
            telemetry.addData("Back Left TP", BLtargetpow);
            telemetry.addData("Back Left CP", BLwheel.getPower());

            //servo testing
            if (gamepad1.b)
            {
                EStargetpos=-1;
                epicservo.setPower(EStargetpos);
                //controller.setServoPosition(0,EStargetpos);
            }
            else if (gamepad1.y)
            {
                EStargetpos=1;
                epicservo.setPower(EStargetpos);
                //controller.setServoPosition(0,EStargetpos);
            }
            //epicservo.setPosition(EStargetpos);
            telemetry.addData("servo TP", EStargetpos);
            //telemetry.addData("servo CP", epicservo.getPosition());


            //THE HERETICS MUST BE PURGED FROM THE EXPANSION HUB

            if (gamepad2.a)
            {
                INtargetpow=1;

            }
            else if (gamepad2.x)
            {
                INtargetpow=-1;
            }
            else
            {
                INtargetpow=0;
            }
            InMotor.setPower(INtargetpow);

            telemetry.addData("A stat", gamepad1.a);
            telemetry.addData("X stat", gamepad1.x);
            telemetry.addData("Intake power", InMotor.getPower());


            //SNTH.setPower(handicap*SNTHtp);
            //telemetry.addData("servo1 TP", SNTHtp);
            //telemetry.addData("servo1 CP", SNTH.getPower());
            //*/
            if (gamepad1.right_trigger>=0.5){
                if (handicap<1){
                    handicap=handicap+0.1;
                }
                while (gamepad1.right_trigger>=0.5){

                }
            }else if (gamepad1.left_trigger>=0.5){
                if (handicap>0.1){
                    handicap=handicap-0.1;
                }
                while (gamepad1.left_trigger>=0.5){

                }
            }
            telemetry.addData("Handicap",handicap);

            //Pixplane servo usage/testing
            if (gamepad2.b)
            {
                PIXtargetpos=-1;
            }
            else if (gamepad2.y)
            {
                PIXtargetpos=1;
            } else{
                PIXtargetpos=0;
            }
            PIXplane.setPower(PIXtargetpos);
            //epicservo.setPosition(EStargetpos); - may use later
            telemetry.addData("PIXTP", PIXtargetpos);


            //SUFFER NOT THE HERETIC TO LIVE!
            //(this is our airplane script)
            if ((gamepad2.right_trigger>=0.5))
            {
                SNTHtargetpow=-1.;
            } else if (gamepad2.left_trigger>=0.5) {
                SNTHtargetpow=1;
            }
            /* else{
                SNTHtargetpow=0;
            }*/
            SNTH.setPower(SNTHtargetpow);
            //epicservo.setPosition(EStargetpos); - may use later
            telemetry.addData("SNTHTP", SNTHtargetpow);


        }
    }
}
